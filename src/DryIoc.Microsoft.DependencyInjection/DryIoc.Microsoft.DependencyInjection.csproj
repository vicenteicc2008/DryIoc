<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net6.0;net7.0</TargetFrameworks>

        <Product>DryIoc.Microsoft.DependencyInjection</Product>
        <VersionPrefix>6.2.0</VersionPrefix>
        <VersionSuffix></VersionSuffix>

        <AssemblyName>$(Product)</AssemblyName>
        <AssemblyTitle>$(AssemblyName) $(TargetFramework)</AssemblyTitle>
        
        <PackageId>$(AssemblyName)</PackageId>
        <Title>$(AssemblyName)</Title>
        <Description>DryIoc adapter for Microsoft.Extensions.DependencyInjection</Description>
        <PackageTags>DryIoc;Dependency Injection;DI;IoC;Asp;AspNet;vNext;AspNetCore;NetCore</PackageTags>
        <PackageReleaseNotes>
<![CDATA[
## v6.2.0

- added: NET 6.0, NET 7.0 and MS.Ext.DI.Abstractions 7.0 support
- updated DryIoc to v5.4.0
- fixed: #547 Blazor File Upload issue with Net 7 and MS DI Package
- fixed: #567 Using DryIoc causes Blazor to crash
 

## v6.1.1

- fixed: #555 Avoiding cloning the container that already has the MicrosoftDependencyInjectionRules and RegistrySharing.Share
- updated DryIoc to v5.3.3


## v6.1.0

- added: RegisterDescriptor overload with IfAlreadyRegistered and optional serviceKey argument
- fixed: Using the explicit IfAlreadyRegistered.AppendNotKeyed for default RegisterDesciptor in Populate and WithDependencyInjectionAdapter methods
- fixed: #520 WithDependencyInjectionAdapter / Populate do not work with Default IfAlreadyRegistered.Replace 

]]>
        </PackageReleaseNotes>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\DryIoc\DryIoc.csproj" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
        <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="6.0.0" />
    </ItemGroup>
    <ItemGroup Condition="'$(TargetFramework)' != 'netstandard2.0'">
        <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="7.0.0" />
    </ItemGroup>
</Project>
